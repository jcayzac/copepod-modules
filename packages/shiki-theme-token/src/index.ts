/*
 * A theme that "colors" tokens based on their grammar scope name.
 *
 * The list of supporter scopes is based on the what I collected using the
 * "Developer: Inspect Editor Tokens and Scopes" feature in VS Code. It can
 * be amended any time.
 */

import type { ThemeRegistration } from 'shiki'

export default {
	type: 'dark',
	name: 'token',
	colors: Object.fromEntries([
		'editor.background',
		'editor.foreground',
		'terminal.ansiBlack',
		'terminal.ansiRed',
		'terminal.ansiGreen',
		'terminal.ansiYellow',
		'terminal.ansiBlue',
		'terminal.ansiMagenta',
		'terminal.ansiCyan',
		'terminal.ansiWhite',
		'terminal.ansiBrightBlack',
		'terminal.ansiBrightRed',
		'terminal.ansiBrightGreen',
		'terminal.ansiBrightYellow',
		'terminal.ansiBrightBlue',
		'terminal.ansiBrightMagenta',
		'terminal.ansiBrightCyan',
		'terminal.ansiBrightWhite',
	].map(scope => [scope, scope])),
	tokenColors: [
		'comment.block.documentation',
		'comment',
		'constant.language.null',
		'constant.language.undefined',
		'constant.numeric',
		'constant',
		'control',
		'entity.name.function',
		'entity.name.section',
		'entity.name.tag.nesting.selector.css',
		'entity.name.tag.reference.scss',
		'entity.name.tag',
		'entity.name.type',
		'entity.other.attribute-name.class',
		'entity.other.attribute-name.pseudo-class',
		'entity.other.attribute-name.pseudo-element',
		'entity.other.attribute-name',
		'entity.other.inherited-class',
		'fenced_code.block.language',
		'keyword.control.at-rule',
		'keyword.control.export',
		'keyword.control',
		'keyword.operator.expression',
		'keyword.operator.new',
		'keyword.operator',
		'keyword.other.type',
		'keyword.other.unit',
		'keyword.type',
		'markup.bold',
		'markup.fenced_code.block.markdown punctuation',
		'markup.italic',
		'markup.underline.link.image',
		'markup.underline.link',
		'meta.class storage.type',
		'meta.class variable.object.property',
		'meta.jsx.children',
		'meta.method.declaration',
		'meta.object-literal.key',
		'meta.property-list entity.name.tag.css',
		'meta.property-name.css',
		'meta.var.expr storage.type',
		'meta.var.expr',
		'punctuation.accessor',
		'punctuation.definition.block.tag.jsdoc',
		'punctuation.definition.block',
		'punctuation.definition.comment',
		'punctuation.definition.heading',
		'punctuation.definition.keyword',
		'punctuation.definition.parameters',
		'punctuation.definition.string.begin',
		'punctuation.definition.string.end',
		'punctuation.definition.tag',
		'punctuation.section.property-list.begin.bracket.curly.css',
		'punctuation.section.property-list.end.bracket.curly.css',
		'punctuation.separator',
		'punctuation',
		'storage.modifier',
		'storage.type.class',
		'storage.type.function.arrow',
		'storage.type.function',
		'storage.type.interface',
		'storage.type.property',
		'storage.type.type',
		'storage.type',
		'string.other.link',
		'string.quoted.single',
		'string.template',
		'string',
		'support.class',
		'support.constant.property-value.css',
		'support.constant.property-value',
		'support.constant',
		'support.function',
		'support.type.property-name',
		'support.type',
		'variable.language.this',
		'variable.object.property',
		'variable.other.object',
		'variable',
	].map(scope => ({
		scope,
		settings: {
			foreground: scope,
		},
	})),
} satisfies ThemeRegistration
